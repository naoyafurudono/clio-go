package main

import (
	"fmt"
	"os"
	"path"
	"path/filepath"
	"strings"

	"google.golang.org/protobuf/compiler/protogen"
)

const (
	contextPackage        = protogen.GoImportPath("context")
	greetv1ConnectPackage = protogen.GoImportPath("github.com/naoyafurudono/proto-cli/gen/greet/v1/greetv1connect")
	cobraPackage          = protogen.GoImportPath("github.com/spf13/cobra")
	clioPackage           = protogen.GoImportPath("github.com/naoyafurudono/clio")

	usage   = `todo`
	version = "0.0.1"
)

func main() {
	if len(os.Args) == 2 && os.Args[1] == "--version" {
		fmt.Fprintln(os.Stdout, version)
		os.Exit(0)
	}
	if len(os.Args) == 2 && (os.Args[1] == "-h" || os.Args[1] == "--help") {
		fmt.Fprintln(os.Stdout, usage)
		os.Exit(0)
	}
	if len(os.Args) != 1 {
		fmt.Fprintln(os.Stderr, usage)
		os.Exit(1)
	}
	protogen.Options{}.Run(
		func(plugin *protogen.Plugin) error {
			for _, file := range plugin.Files {
				if file.Generate {
					generate(plugin, file)
				}
			}
			return nil
		},
	)
}

func generate(plugin *protogen.Plugin, f *protogen.File) {
	generatedFilenamePrefixToSlash := filepath.ToSlash(f.GeneratedFilenamePrefix)
	filepath := path.Join(
		path.Dir(generatedFilenamePrefixToSlash),
		// パッケージ専用のディレクトリを掘る
		string(f.GoPackageName)+"clio",
		path.Base(generatedFilenamePrefixToSlash)+".clio.go",
	)
	// fmt.Fprint(os.Stderr, filepath)
	gf := plugin.NewGeneratedFile(filepath, f.GoImportPath)

	generatePreamble(gf, f)
	generateBody(gf, f)
}

func generatePreamble(g *protogen.GeneratedFile, file *protogen.File) {
	g.P("// Code generated by protoc-gen-clio-go. DO NOT EDIT.")
	g.P("//")
	if file.Proto.GetOptions().GetDeprecated() {
		g.P(file.Desc.Path(), " is a deprecated file.")
	} else {
		g.P("// Source: ", file.Desc.Path())
	}
	g.P()
	g.P("package ", file.GoPackageName+"clio")
	g.P()

}

func cmdSignature(g *protogen.GeneratedFile, serviceName string) string {
	cmdName := fmt.Sprintf("New%sCommand", serviceName)
	return fmt.Sprintf("func %s(ctx %s, s %s) *%s",
		cmdName, // function name
		g.QualifiedGoIdent(contextPackage.Ident("Context")),                    // first param type
		g.QualifiedGoIdent(greetv1ConnectPackage.Ident("GreetServiceHandler")), // second param type
		g.QualifiedGoIdent(cobraPackage.Ident("Command")),
	)
}

func generateCobraCommand(g *protogen.GeneratedFile, varName, use, short, long string) {
	g.P("var "+varName+"=", g.QualifiedGoIdent(cobraPackage.Ident("Command"))+"{")
	g.P("Use: " + use + ",")
	g.P("Long: " + long + ",")
	g.P("Short: ", short+",")
	g.P("}")
}

func generateClioCommand(g *protogen.GeneratedFile, varName, use, short, long string) {
	g.P("var "+varName+"=", g.QualifiedGoIdent(clioPackage.Ident("RpcCommand"))+"(ctx,")
	g.P(use + ",")
	g.P(long + ",")
	g.P(short + ",")
	g.P("reqData,")
	g.P(")")
}

func generateAddCommand(g *protogen.GeneratedFile, parentCommandName string, children []string) {
	g.P(parentCommandName + ".AddCommand(")
	for _, child := range children {
		g.P(child + ",")
	}
	g.P(")")
}

func generateBody(g *protogen.GeneratedFile, f *protogen.File) {
	for _, service := range f.Services {
		sig := cmdSignature(g, service.GoName)
		g.P(sig, " {")

		serviceCommandName := service.GoName
		generateCobraCommand(g, serviceCommandName, serviceCommandName, cts(service.Comments.Leading.String()), cts(service.Comments.Leading.String()))
		// todo generate parent command
		g.P(fmt.Sprintf(`var reqData *string = %s.PersistentFlags().StringP("data", "d", "{}", "request message represented as a JSON")`, serviceCommandName))

		var children = make([]string, 0, len(service.Methods))
		for _, method := range service.Methods {
			rpcName := method.GoName
			generateClioCommand(g, rpcName, rpcName, cts(method.Comments.Leading.String()), cts(method.Comments.Leading.String()))
			children = append(children, rpcName)
		}
		generateAddCommand(g, serviceCommandName, children)
		g.P("}")
	}
}

// comment to string
func cts(c string) string {
	return fmt.Sprintf(`"%s"`, strings.Trim(c, " /\n"))
}

// 	g.P(`import (
// 			"context"

// 			"github.com/naoyafurudono/proto-cli/gen/greet/v1/greetv1connect" // generated by protoc-gen-connect-go
// 			clio "github.com/naoyafurudono/clio-go"
// 			"github.com/spf13/cobra"
// )

// // CLI implementation (what we generate)
// func NewGreetCommand(ctx context.Context, s greetv1connect.GreetServiceHandler) *cobra.Command {
// 			var greetService = &cobra.Command{
// 				Use:   "great",
// 				Short: "Important service.",
// 				Long:  "Important service.",
// 			}
// 			var reqData *string = greetService.PersistentFlags().StringP("data", "d", "{}", "request message represented as a JSON")

// 			greetServiceHello := clio.RpcCommand(ctx,
// 				s.Hello,
// 				"hello",
// 				"basic greeting",
// 				"basic greeting",
// 				reqData,
// 			)
// 			greetServiceThanks := clio.RpcCommand(ctx,
// 				s.Thanks,
// 				"thanks",
// 				"you cannot live alone",
// 				"you cannot live alone",
// 				reqData,
// 			)

// 			greetService.AddCommand(
// 				greetServiceHello,
// 				greetServiceThanks,
// 			)
// 			return greetService
// }
// 		`)
// }
